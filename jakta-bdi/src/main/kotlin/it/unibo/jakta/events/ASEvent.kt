package it.unibo.jakta.events

import it.unibo.jakta.Intention
import it.unibo.jakta.beliefs.ASBelief
import it.unibo.jakta.intentions.ASIntention
import it.unibo.tuprolog.core.Struct
import it.unibo.tuprolog.solve.Solution

/**
 * A BDI Agent can react to two types of Events: External and Internal.
 * An Event is a pair where the trigger represents the change that took place and the [Intention] is the
 * associated intention.
 *
 * As External Events are not generated by [Intention]s, they are represented by having an empty [Intention]
 */

//interface ASEvent : Event {
//
//    /** Denotes the change that took place for the Event generation */
//    val value: Struct
//
//    /** The [Event]'s associated [Intention]. Its value is null if the [Event] is an External one. */
//    val intention: ASIntention?
//
//    /** @return true if this is an Internal Event, otherwise false. */
//    fun isInternal(): Boolean = intention != null
//
//    /** @return true if this is an External Event, otherwise false. */
//    fun isExternal(): Boolean = intention == null
//}
//

/**
 * Generates an [Event] to execute a plan.
 * @param value the [AchievementGoalTrigger.Invocation] that triggered this Event.
 * @param intention if the event is internal, this parameter specifies the intention id where the event belongs.
 * If the event is external, this value is set to null. It's default value is null.
 * @return a new instance of [Event]
 */
data class AchievementGoalInvocation(
    override val goal: Struct,
    override val intention: ASIntention? = null,
) : Event.Internal.Goal.Achieve.Add<ASBelief, Struct, Solution, Struct>

/**
 * Generates an [Event] for doing something after a plan failure.
 * @param value the [Struct] that triggered this Event.
 * @param intention if the event is internal, this parameter specifies the intention id where the event belongs.
 * If the event is external, this value is set to null. It's default value is null.
 * @return a new instance of [Event]
 */
data class AchievementGoalFailure(
    override val goal: Struct,
    override val intention: ASIntention? = null,
) : Event.Internal.Goal.Achieve.Remove<ASBelief, Struct, Solution, Struct>

/**
 * Generates an [Event] to test a plan.
 * @param value the [Struct] that triggered this Event
 * @param intention if the event is internal, this parameter specifies the intention id where the event belongs.
 * If the event is external, this value is set to null. It's default value is null.
 * @return a new instance of [Event]
 */
data class TestGoalInvocation(
    override val query: Struct,
    override val intention: ASIntention? = null,
) : Event.Internal.Goal.Test.Add<ASBelief, Struct, Solution>

/**
 * Generates an [Event] for doing something after the failure of the plan's tests.
 * @param value the [Struct] that triggered this Event.
 * @param intention if the event is internal, this parameter specifies the intention id where the event belongs.
 * If the event is external, this value is set to null. It's default value is null.
 * @return a new instance of [Event]
 */
data class TestGoalFailure(
    override val query: Struct,
    override val intention: ASIntention? = null,
) : Event.Internal.Goal.Test.Remove<ASBelief, Struct, Solution>

 /**
 * Generates an [Event] with a [BeliefBaseTrigger.Update] trigger.
 * @param trigger the [BeliefBaseTrigger.Addition] that triggered this Event.
 * @param intention if the event is internal, this parameter specifies the intention id where the event belongs.
 * If the event is external, this value is set to null. It's default value is null.
 * @return a new instance of [Event]
 */
//data class BeliefBaseUpdate(
//    override val value: Struct,
//    val oldBelief: ASBelief,
//    override val intention: ASIntention? = null,
//) : ASEvent, Event.BeliefEvent {
//    constructor(newBelief: ASBelief, oldBelief: ASBelief, intention: ASIntention? = null) : this(
//        newBelief.content.head,
//        oldBelief,
//        intention,
//    )
//}

/**
 * Generates an [Event] triggered by a BeliefBase addition.
 * @param value the [Struct] that triggered this Event.
 * @param intention if the event is internal, this parameter specifies the intention id where the event belongs.
 * If the event is external, this value is set to null. It's default value is null.
 * @return a new instance of [Event]
 */
data class BeliefBaseAddition(
    override val belief: ASBelief,
) : Event.Internal.Belief.Add<ASBelief>

/**
 * Generates an [Event] triggered by a BeliefBase removal.
 * @param value the [Struct] that triggered this Event
 * @param intention if the event is internal, this parameter specifies the intention id where the event belongs.
 * If the event is external, this value is set to null. It's default value is null.
 * @return a new instance of [Event]
 */
data class BeliefBaseRemoval(
    override val belief: ASBelief,
) : Event.Internal.Belief.Remove<ASBelief>
